name: Replace Old Code with New

on:
  pull_request:
    branches:
        - main
    types:
        - opened
        - synchronize

jobs:
  replace:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install openai

      - name: Run code
        run: |
          const { Configuration, OpenAIApi } = require("openai");
          const configuration = new Configuration({ apiKey: process.env.OPENAI_API_KEY });
          const openai = new OpenAIApi(configuration);
          const completion = await openai.createChatCompletion({
            model: "gpt-3.5-turbo",
            messages: [
              {"role": "system", "content": "You are a helpful assistant."},
              {"role": "user", "content": "Hello world"}
            ],
          });
          console.log(completion.data.choices[0].message);

      - name: Get Updated Code
        id: process-files
        uses: actions/github-script@v5
        with:
          script: |
            const { owner, repo, number } = context.issue;
            // Get the list of files changed in the PR
            const { data: files } = await github.rest.pulls.listFiles({ owner, repo, pull_number: number });
            const updatedFiles = [];
            const fs = require('fs');
            const fetch = require('node-fetch');
            for (const file of files) {
              // Read file contents
              const fileContent = fs.readFileSync(file.filename, 'utf8');
              console.log("file content");
              console.log(fileContent);
              console.log('----------');
              // Make a request to the OpenAI API using curl
              const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Bearer ${{ secrets.OPENAI_API_KEY }}' // Replace with your OpenAI API key
                },
                body: JSON.stringify({
                  "model": "gpt-3.5-turbo",
                  "messages": [
                    { "role": "system", "content": "You are a helpful assistant." },
                    { "role": "user", "content": "Hello!" }
                  ]
                })
              });
              const newContent = await response.json();
              console.log("server response:");
              console.log(newContent);
              console.log('---------------------');
              // Write new content to file
              fs.writeFileSync(file.filename, newContent.choices[0].text, 'utf8');
              updatedFiles.push({ path: file.filename, explanation: newContent.choices[0].text });
            }
            console.log("::set-output name=updatedFiles::" + JSON.stringify(updatedFiles));

            env:
              FILES: ${{ toJson(github.event.pull_request.changed_files) }}

      - name: Commit and Push to New Branch
        run: |
            # Extract the source branch name
            SOURCE_BRANCH=$GITHUB_HEAD_REF
            NEW_BRANCH="optimised-$SOURCE_BRANCH"

            # Create and switch to the new branch
            git checkout -b $NEW_BRANCH

            # Set git user details
            git config user.name "GitHub Action"
            git config user.email "action@github.com"

            # Add and commit changes
            git add -A
            git commit -m "Replaced old code with new code from API" || echo "No changes to commit"

            # Use GITHUB_TOKEN for authentication
            git remote set-url origin https://x-access-token:${{ secrets.GH_SECRET }}@github.com/${{ github.repository }}

            # Push changes
            git push --set-upstream origin $NEW_BRANCH || echo "No changes to push"
    
      - name: Create PR and Comment
        uses: actions/github-script@v5
        with:
          script: |
            const sourceBranch = context.payload.pull_request.head.ref; 
            const optimisedBranch = `optimised-${sourceBranch}`;

            // Create a PR
            const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Optimised changes for ${sourceBranch}`,
                head: optimisedBranch, // "optimised-testbranch"
                base: sourceBranch, // "testbranch"
                body: "This PR contains optimised code."
            });

            console.log('before env')
            console.log(${{ steps.process-files.outputs.updatedFiles }})
            console.log('after env')
            const updatedFiles = JSON.parse(`${{ steps.process-files.outputs.updatedFiles }}`);

            // Combine explanations and create a comment on the new PR
            const explanations = updatedFiles.map(file => `File: ${file.path}\nExplanation: ${file.explanation}`).join("\n\n");
            
            await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                body: explanations
            });