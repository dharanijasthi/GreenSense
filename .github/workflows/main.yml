name: GreenSense

on:
  pull_request:
    branches:
        - main
    types:
        - opened
        - synchronize

jobs:
  GreenSense:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Updated Code
        env: 
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} 
        id: process-files
        uses: actions/github-script@v5
        with:
          script: |
            const https = require('https');
            const fs = require('fs');
        
            const { owner, repo, number } = context.issue;
        
            const prompt = `
            Your task is to optimize the provided code. Improve its speed and time complexity. Improve its algorithmic efficiency. Some optimizations may include connection pooling, inbuilt functions, parallel processing. The response should strictly follow this structure:

            First, begin with the string [CODE_START], followed by the optimized code, and then [CODE_END]. After that, begin with [EXPLANATION_START]. For each function you've optimized, start the explanation with the function name followed by its description of optimization. Please make sure each function's explanation is on a new line. Do not include the time complexities of the original or optimized code in the explanation section. Conclude with [EXPLANATION_END].
            
            For example:
            [EXPLANATION_START]
            function1(): Use the list() function with range() to create the large list efficiently.
            function2(): Use the math.factorial() function to calculate the factorial of a number.
            function3(): Use a loop to calculate the Fibonacci sequence iteratively, which is more efficient.
            [EXPLANATION_END]`

            
            function get_function_explanations(explanation) {
              const functionPattern = /(\w+)\(\):\s*([\s\S]*?(?=\w+\(\):|$))/g;

              let match;
              let explanations = [];
              
              while ((match = functionPattern.exec(explanation)) !== null) {
                  const functionName = match[1];
                  const functionExplanation = match[2].trim(); // Trimming to remove any trailing or leading whitespace
                  explanations.push({ [functionName]: functionExplanation });
              }
              return explanations;
            }

            async function makeOpenAIRequest(fileContent) {
                return new Promise((resolve, reject) => {
                    const requestData = {
                        model: "gpt-3.5-turbo",
                        temperature: 0.1,
                        messages: [
                            {
                              "role": "system",
                              "content": prompt
                            },
                            {
                              "role": "user",
                              "content": fileContent
                            }
                        ]
                    };
        
                    const options = {
                        hostname: 'api.openai.com',
                        path: '/v1/chat/completions',
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + process.env.OPENAI_API_KEY,
                            'Content-Length': Buffer.byteLength(JSON.stringify(requestData))
                        }
                    };
        
                    const req = https.request(options, res => {
                        let responseBody = '';
        
                        res.on('data', chunk => {
                            responseBody += chunk;
                        });
        
                        res.on('end', () => {
                            resolve(JSON.parse(responseBody));
                        });
                    });
        
                    req.on('error', error => {
                        reject(error);
                    });
        
                    req.write(JSON.stringify(requestData));
                    req.end();
                });
            }
        
            // Get the list of files changed in the PR
            const { data: files } = await github.rest.pulls.listFiles({
                owner, repo, pull_number: number
            });
        
            const updatedFiles = [];
            const explanationsArray = [];
        
            for (const file of files) {
                const fileContent = fs.readFileSync(file.filename, 'utf8');
        
                try {
                    const response = await makeOpenAIRequest(fileContent);

                    // GPT response
                    const chatResponse = response.choices[0].message.content;
        
                    const code_regex = /\[CODE_START\]([\s\S]*?)\[CODE_END\]/;
                    const explanation_regex = /\[EXPLANATION_START\]([\s\S]*?)\[EXPLANATION_END\]/;
        
                    const codeMatch = chatResponse.match(code_regex);
                    const explanationMatch = chatResponse.match(explanation_regex);
        
                    let updatedCode = fileContent;
                    let explanation = 'No explanation';
        
                    if (codeMatch && codeMatch[1]) {
                        updatedCode = codeMatch[1];
                    } 
        
                    if (explanationMatch && explanationMatch[1]) {
                        explanation = explanationMatch[1];
                    } 
        
                    // Write new content to file
                    fs.writeFileSync(file.filename, updatedCode, 'utf8');
                    
                    let explanations = get_function_explanations(explanation);

                    updatedFiles.push({ path: file.filename, newCode: updatedCode, oldCode: fileContent });
                    explanationsArray.push({ path: file.filename, explanation: explanations })
                } catch (error) {
                    console.error("Error with OpenAI request:", error);
                }
            }
            console.log(JSON.stringify(updatedFiles));
            console.log(JSON.stringify(explanationsArray));

            core.exportVariable('updatedFiles', updatedFiles);
            core.exportVariable('explanationsArray', explanationsArray);


      - name: Commit and Push to New Branch
        run: |
            # Extract the source branch name
            SOURCE_BRANCH=$GITHUB_HEAD_REF
            NEW_BRANCH="Green-$SOURCE_BRANCH"

            # Create and switch to the new branch
            git checkout -b $NEW_BRANCH

            # Set git user details
            git config user.name "GitHub Action"
            git config user.email "action@github.com"

            # Add and commit changes
            git add -A
            git commit -m "Replaced old code with new code from API" || echo "No changes to commit"

            # Use GITHUB_TOKEN for authentication
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

            # Push changes
            git push --set-upstream origin $NEW_BRANCH || echo "No changes to push"

      - name: Python Setup
        uses: actions/setup-python@v4
        with:
            # Semantic version range syntax or exact version of a Python version
            python-version: '3.9'
            # Optional - x64 or x86 architecture, defaults to x64
            architecture: 'x64'
                     
      - name: Calculating Star Rating
        env: 
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} 
        run: |
            pip install -r requirements.txt
            python .github/workflows/score.py
            npm install axios

      - name: Create PR
        uses: actions/github-script@v5
        with:
          script: |
            const sourceBranch = context.payload.pull_request.head.ref; 
            const optimisedBranch = `Green-${sourceBranch}`;

            console.log(`dict: ${process.env.star_ratings}`)
            star_ratings=JSON.parse(process.env.star_ratings)
            console.log('star ratings')

            old_pr_score=process.env.old_pr_score
            new_pr_score=process.env.new_pr_score
            old_pr_star_rating=process.env.old_pr_star_rating
            new_pr_star_rating=process.env.new_pr_star_rating
            
            console.log(`old_pr_score, new_pr_score, old_pr_star_rating, new_pr_star_rating`)
            
            const https = require('https');
            const axios = require('axios'); // You may need to install the axios library

            const owner = context.repo.owner; // Replace with the repository owner's username or organization name
            const repo = context.repo.repo; // Replace with the repository name
            const baseBranch = sourceBranch; // Replace with the base branch name
            const headBranch = optimisedBranch; // Replace with the head branch name
            
            function extractFunctionNamesAndStartLines(code,functionInfo) {
                const functionDefs = code.match(/(def\s+\w+\s*\(.*\)|\w+\s*\(.*\)\s*{)/g) || [];

                for (const funcDef of functionDefs) {
                    const lines = code.split('\n');
                    const lineNum = lines.findIndex(line => line.includes(funcDef)) + 1;
                    const funcName = funcDef.match(/(\w+)\s*\(/)[1];
                    functionInfo.push({ name: funcName, startLine: lineNum });
                }
                console.log("functionInfo",functionInfo)
                return functionInfo;
            }

            async function getFileContent(filePath) {
                try {
                    const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${filePath}?ref=${optimisedBranch}`;
                    const response = await axios.get(apiUrl, {
                        headers: {
                            Authorization: `Bearer ${{ secrets.GITHUB_TOKEN }}`,
                        },
                    });

                    if (response.data && response.data.content) {
                        const content = Buffer.from(response.data.content, 'base64').toString('utf-8');
                        return content;
                    } else {
                        throw new Error(`Failed to fetch content for file: ${filePath}`);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    throw error;
                }
            }

            async function extractFunctionInfoFromFiles(changedFiles) {
                const functionInfo = [];
                for (const file of changedFiles) {
                    let lineNumbers1 = [];
                    const fileContent = await getFileContent(file); // Function to fetch file content
                    lineNumbers1 = extractFunctionNamesAndStartLines(fileContent,functionInfo);
                }
                console.log("lineNumbers",lineNumbers1)
                return lineNumbers1
            }

            const retrieveChangedFilesapiUrl = `https://api.github.com/repos/${owner}/${repo}/compare/${baseBranch}...${headBranch}`;


            async function getChangedFiles() {
                try {
                    const response = await axios.get(retrieveChangedFilesapiUrl);
                    const changedFiles = response.data.files.map((file) => file.filename);
                    console.log('Changed Files:',changedFiles);
                    const lineNumbers = extractFunctionInfoFromFiles(changedFiles);
                    console.log("lineNumbers", lineNumbers)
                    return lineNumbers;
                } catch (error) {
                    console.error('Error:', error);
                }
            }

            const changedFilesRes = await getChangedFiles();
            console.log("changedFilesRes",changedFilesRes)
            // Function to generate the markdown table for a single file
            function generateTableForFile(file, functionsData, lineNumbers) {
                let table = `### [${file}](https://github.com/${process.env.GITHUB_REPOSITORY}/tree/${optimisedBranch}/${file}):\n\n`;
                table += "| Function | Old Score | New Score | Old Rating | New Rating |\n";
                table += "|----------|-----------|-----------|------------|------------|\n";

                for (const func of functionsData) {
                    for (const [funcName, scores] of Object.entries(func)) {
                        console.log("lineNumbers result",lineNumbers)
                        for(const fnName of changedFilesRes){
                            console.log("fnName",fnName)
                            if(changedFilesRes[fnName]['name'] == funcName){
                                table += `| ${funcName}(https://github.com/dharanijasthi/GreenSense/blob/${optimisedBranch}/changedFilesRes[fnName]['name'].py#LchangedFilesRes[fnName]['startLine']) | ${scores.old_score} | ${scores.new_score} | ${scores.old_star_rating} | ${scores.new_star_rating} |\n`;
                            }
                        }
                    }
                }
                return table;
            }
            let commentBody = "## GreenSense Report\n\n";
            for (const [file, fileData] of Object.entries(star_ratings)) {
                commentBody += generateTableForFile(file, fileData, optimisedBranch, lineNumbers);
                commentBody += "\n\n";  // Add some space between tables
            }
            
            additionalComments = '## Overall PR stats:\n\n';
            additionalComments += "| Old Score | New Score | Old Rating | New Rating |\n";
            additionalComments += "|-----------|-----------|------------|------------|\n";
            additionalComments += `| ${old_pr_score} | ${new_pr_score}  | ${old_pr_star_rating} | ${new_pr_star_rating} |\n\n`; // Added a newline here for a break between the table and the next header

            additionalComments += '## Legend and explanation:\n\n';
            additionalComments += 'GreenSense rates code based on:\n';
            additionalComments += '- Time complexity\n';
            additionalComments += '- Space complexity\n';
            additionalComments += '- Cyclomatic complexity\n';
            additionalComments += '___\n\n'; // Two new lines for a break between the content and the next table

            additionalComments += 'The star ratings can be classified as:\n';
            additionalComments += '| Star Rating       | Explanation |\n';
            additionalComments += '|-------------------|-------------|\n';
            additionalComments += '| ⭐⭐⭐⭐★           | Excellent   |\n';
            additionalComments += '| ⭐⭐⭐★ and above   | Good        |\n';
            additionalComments += '| ⭐⭐★ and above    | Needs work  |\n';

            commentBody += additionalComments
            console.log(`comment body : \n ${commentBody}`)

            // Check if a PR already exists for the branch
            const existingPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${optimisedBranch}`
            });

            let prNumber = null
            // If no PRs found for the branch, create one
            if (existingPRs.data.length === 0) {
              // Create a PR
              pr = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `GreenSense optimisations for ${sourceBranch}`,
                  head: optimisedBranch, // "optimised-testbranch"
                  base: sourceBranch, // "testbranch"
                  body: commentBody
              });
              console.log("pr",pr)
              prNumber = pr.data.number
            }
            else {
              prNumber = existingPRs.data[0].number;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,  // PRs are treated as issues in GitHub's API
                body: commentBody
              });
            }
          
            core.exportVariable('prNumber', prNumber);

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # You can specify a Node.js version of your choice

      # Install parse-diff
      - name: Install parse-diff
        run: npm install parse-diff

      - name: Add PR comments
        uses: actions/github-script@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const https = require('https');
            
            prNumber=process.env.prNumber
            repoName=context.repo.repo
            repoOwner=context.repo.owner

            async function getPRDiff(prNumber) {
                return new Promise((resolve, reject) => {
                    const token = process.env.GITHUB_TOKEN;
                    const options = {
                        hostname: 'patch-diff.githubusercontent.com',
                        path: `/raw/${repoOwner}/${repoName}/pull/${prNumber}.diff`,
                        method: 'GET',
                        headers: {
                            'User-Agent': 'NodeJS',
                            'Authorization': `token ${token}`,
                            'Accept': 'application/vnd.github.v3.raw'
                        }
                    };
        
                    const req = https.request(options, res => {
                        let responseBody = '';
        
                        res.on('data', chunk => {
                            responseBody += chunk;
                        });
        
                        res.on('end', () => {
                            resolve(responseBody);
                        });
                    });
        
                    req.on('error', error => {
                        reject(error);
                    });

                    req.end();
                });
            }
            const prDiff = await getPRDiff(prNumber);

            function getFunctionLineNumber(diff) {
                const lines = diff.split('\n');
                let currentFile = null;
                let currentOriginalLine = null;
                let result = {};

                for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    
                    // Check if the line is the start of a new file diff
                    if (line.startsWith('diff --git')) {
                        const pathMatch = line.match(/b\/(\S+)/);
                        if (pathMatch) {
                            currentFile = pathMatch[1];
                            result[currentFile] = {};
                        }
                        continue;
                    }

                    if (line.startsWith('@@')) {
                        const lineNumMatch = line.match(/-(\d+),\d+/);
                        if (lineNumMatch) {
                            currentOriginalLine = parseInt(lineNumMatch[1]);
                        }
                        continue;
                    } 
                    // Check for function definition and save the line number
                    const funcMatch = line.match(/def (\w+)\(/);
                    if (funcMatch && currentFile && !line.startsWith('+')) {
                        const funcName = funcMatch[1];
                        result[currentFile][funcName] = currentOriginalLine;
                    }

                    currentOriginalLine++;

                }
                return result;
            }
            const parsedDiff = getFunctionLineNumber(prDiff);
            console.log(`parsedDiff : ${parsedDiff}`)

            const explanationsArray=JSON.parse(process.env.explanationsArray);
            console.log(`explanationsArray : ${explanationsArray}`)

            let comments = [];
            console.log("explanationsArray",explanationsArray)
            explanationsArray.forEach(item => {
                const filePath = item.path;
                if (parsedDiff[filePath]) {
                    item.explanation.forEach(explanation => {
                    const functionName = Object.keys(explanation)[0];
                    const message = explanation[functionName];
                    const position = parsedDiff[filePath][functionName];
                    if (position !== undefined) {
                        comments.push({
                        path: filePath,
                        position: position,
                        body: message
                        });
                    }
                    });
                }
            });

            console.log(comments);
            
            // Create review comments for each file
            await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,  
                event: "COMMENT",  
                comments: comments
            });
            